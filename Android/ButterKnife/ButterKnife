ButterKnife:

Refer below for implementation example :
https://github.com/vav8085/AndroidShoppingCart
https://github.com/vav8085/ButterKnifePractice


* ButterKnife is a library that is used for injecting views/resources in Android class variables
  this way we don't have to call findViewById() getString() or set listeners that makes the code
  cleaner.


-----------@BindView - Binding views:-------------------------------------------
1.  We can use @BindView to inject various ids to Android variables
    Example: @BindView(R.id.password) EditText passWord;
             @BindView(R.id.login_button) Button loginButton;
             @BindView(R.id.progressBar) ProgressBar progressBar;
2.  To make Butterknife work in Android activities we have to call ButterKnife.bind(this) in onCreate.
      @Override public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.simple_activity);
        ButterKnife.bind(this);
          // TODO Use fields...
      }

-----------@BindString/@BindDrawable/@BindColor - Binding resources:------------
1.  We can also bind strings and other resources to android variables:
    Example:  @BindString(R.string.user_cannot_be_blank) String userNotBlank;
              @BindString(R.string.password_not_blank) String passwordNotBlank;
              @BindDrawable(R.drawable.graphic) Drawable graphic;
              @BindColor(R.color.red) int red;
              @BindDimen(R.dimen.spacer) Float spacer;

-----------Non Activity binding-------------------------------------------------

1.  We can also bind views inside a fragment but for this we will need the fragment
    view and the current object.
    Example:
    public class FancyFragment extends Fragment {
    @BindView(R.id.button1) Button button1;
    @BindView(R.id.button2) Button button2;
    private Unbinder unbinder;

    @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
      View view = inflater.inflate(R.layout.fancy_fragment, container, false);
      unbinder =ButterKnife.bind(this, view);
      // TODO Use fields...
      return view;
    }
  }

  @Override public void onDestroyView() {
    super.onDestroyView();
    unbinder.unbind();
  }

2.  This can also be used to simplify view holder patterns in Android.

-----------We can also group similar views with similar properties to change them simultaneously------
                                ---Apply an Action---
1.  We can bind similar views to a List by annotating it with @BindViews of views
    and apply changes over them simultaneously:
    @BindViews({ R.id.first_name, R.id.middle_name, R.id.last_name })
    List<EditText> nameViews;
2.  Then we can apply the actions to the list:
    ButterKnife.apply(nameViews, DISABLE);
    ButterKnife.apply(nameViews, ENABLED, false);

3.  And then defining the DISABLE and ENABLE actions:
    static final ButterKnife.Action<View> DISABLE = new ButterKnife.Action<View>() {
    @Override public void apply(View view, int index) {
        view.setEnabled(false);
      }
    };
    static final ButterKnife.Setter<View, Boolean> ENABLED = new ButterKnife.Setter<View, Boolean>() {
      @Override public void set(View view, Boolean value, int index) {
        view.setEnabled(value);
      }
    };
----------We can also bind listeners to the views-------------------------------
1.  To do this we can annotate a method with @onClick(R.id.submit)
    public void sayHi(Button button) {
      button.setText("Hello!");
    }

2.  @OnClick({ R.id.door1, R.id.door2, R.id.door3 })
public void pickDoor(DoorView door) {
  if (door.hasPrizeBehind()) {
    Toast.makeText(this, "You win!", LENGTH_SHORT).show();
  } else {
    Toast.makeText(this, "Try again", LENGTH_SHORT).show();
  }
}

---------Optional bindings------------------------------------------------------

1.  By default, both @Bind and listener bindings are required. An exception will
    be thrown if the target view cannot be found.

2.  To suppress this behavior and create an optional binding, add a @Nullable
    annotation to fields or the @Optional annotation to methods.

    @Nullable @BindView(R.id.might_not_be_there) TextView mightNotBeThere;

    @Optional @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() {
      // TODO ...
    }
